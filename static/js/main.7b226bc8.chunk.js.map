{"version":3,"sources":["components/drop-down/dropDownList.js","components/header/header.js","components/current_chat/chat.js","components/current_chat/index.js","components/addNewPost/addNewPost.js","components/chats/chats.js","App.js","index.js"],"names":["DropDownList","classSandwich","sandwichToggle","classdropDown","isOpen","CreateNewChat","className","onClick","key","alert","Header","props","state","SandwichToggle","bind","closeMenu","this","setState","document","addEventListener","removeEventListener","lastOpenedId","Col","variant","onChatAutoFocus","Container","Row","xs","SearchInChatArea","Component","Chat","chats","filteredobject","searchAllValue","searchChatValue","map","filteredchat","item","id","indexOf","label","AddNewPost","newtext","UpdateText","eraseValuePost","event","target","value","onAddPost","placeholder","form","onChange","type","Chats","createChatArea","UpdateChatArea","closeNewChatArea","newChatArea","autoFocus","onAddNewChat","autofocusinsearch","onSearch","onSearchAll","name","plchldr","onSearchChat","exitSearchChatBtn","chatLists","OpenChat","searchAllArea","NewChatArea","App","textarea","post","maxPostId","maxChatId","searchalltext","eraseCreateChatArea","React","createRef","closeNewChatField","deleteSearchValue","index","findIndex","elem","i","length","before","slice","oldElement","newText","push","after","newArr","newChat","current","filtered","chat","filter","text","includes","ref","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7b226bc8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './dropDownList.css'\r\n\r\nconst DropDownList = ({classSandwich, sandwichToggle, classdropDown, isOpen, CreateNewChat}) => {\r\n\r\n    function AboutMyTlgm() {\r\n        return(\r\n            alert('Покупаем сочные мощные БузТоны')\r\n        )\r\n    }\r\n\r\n    return (   \r\n        <div>\r\n            <div className=\"dropdown\">\r\n                <span>\r\n                    <div className={classSandwich} onClick={sandwichToggle}>\r\n                        <div className=\"bar1\"></div>\r\n                        <div className=\"bar2\"></div>\r\n                        <div className=\"bar3\"></div>\r\n                    </div>\r\n                </span>\r\n                    { (isOpen) ? (\r\n                        <div className={classdropDown}>\r\n                            <ul>\r\n                                <li key='1' onClick={()=>CreateNewChat()}>Create a new chat</li>\r\n                                <li key='2' onClick={AboutMyTlgm}>About</li>\r\n                            </ul>\r\n                        </div> \r\n                    ) : (null)  \r\n                }        \r\n            </div>    \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default DropDownList;","import React, {Component} from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport DropDownList from '../drop-down/dropDownList.js'\r\n\r\nimport './header.css'\r\n\r\nexport default class Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false\r\n        }\r\n        this.SandwichToggle = this.SandwichToggle.bind(this);\r\n        this.closeMenu = this.closeMenu.bind(this);    \r\n        this.classSandwich = \"sandwichButton\";\r\n        this.classdropDown = \"dropdown-content\"       \r\n    }\r\n   \r\n//for sandwich button styles\r\n    SandwichToggle() {       \r\n        this.setState({\r\n            isOpen: (this.state.isOpen ? false : true)\r\n        })\r\n        document.addEventListener('click', this.closeMenu);\r\n        return (this.classSandwich = (this.state.isOpen ? 'sandwichButton' : \"change\"))\r\n      }\r\n\r\n    closeMenu() {\r\n            this.classSandwich = \"sandwichButton\";\r\n            this.setState({ isOpen: false }, () => {\r\n                document.removeEventListener('click', this.closeMenu);\r\n        });\r\n      }\r\n\r\n      SearchInChatArea() {\r\n          if (this.props.lastOpenedId !== '') {\r\n              return (\r\n                    <Col><div className='searchB' \r\n                        variant=\"outline-info\" \r\n                        onClick={this.props.onChatAutoFocus}>Search</div></Col>\r\n              )\r\n          }\r\n      }\r\n\r\n      render() {\r\n        return (     \r\n            <Container className='containerH'>\r\n                <Row>\r\n                    <Col className='colLeft'>\r\n                        <Row>                          \r\n                            <DropDownList \r\n                            classSandwich = {this.classSandwich} \r\n                            sandwichToggle = {this.SandwichToggle}\r\n                            classdropDown = {this.classdropDown}\r\n                            isOpen={this.state.isOpen}\r\n                            CreateNewChat={this.props.CreateNewChat}/> \r\n                            <div className='mytlgm' \r\n                                variant=\"outline-info\" \r\n                                onClick={this.SandwichToggle}>BuzTlgm</div>\r\n                        </Row>                       \r\n                    </Col>                          \r\n                    <Col xs={6}></Col>\r\n                        {this.SearchInChatArea()}\r\n                </Row>\r\n            </Container>\r\n        )    \r\n      }\r\n}\r\n","import React from 'react';\r\n\r\nimport './chat.css'\r\n\r\nfunction Chat({chats, lastOpenedId, filteredobject, searchAllValue, searchChatValue}) {\r\n    if (lastOpenedId !== '') {\r\n        if (searchAllValue) {\r\n            return (\r\n                <div className = 'posts'>\r\n                    {filteredobject.map(filteredchat => filteredchat.map(item => (\r\n                    <div className = 'post filtered wordwrap' key={item.id}>{chats[filteredobject.indexOf(filteredchat)].label} : {item['post']}</div>)\r\n            ))} </div>\r\n            )     \r\n        } else if(searchChatValue) {\r\n            return (\r\n                <div className = 'posts'>\r\n                    {filteredobject.map(item => (\r\n                    <div className = 'post filtered wordwrap' key={item.id}>{item['post']}</div>)\r\n            )} </div>\r\n            )     \r\n        } \r\n\r\n        else {\r\n            return (\r\n                <div className = 'posts'>\r\n                    {chats[lastOpenedId - 1]['textarea'].map(item => (\r\n                    <div className = 'post wordwrap' key={item.id}>{item['post']}</div>\r\n              ))} </div>\r\n            )\r\n        }\r\n    } else if(searchAllValue) {\r\n        return (\r\n            <div className = 'posts'>\r\n                {filteredobject.map(filteredchat => filteredchat.map(item => (\r\n                <div className = 'post filtered wordwrap' key={item.id}>{chats[filteredobject.indexOf(filteredchat)].label} : {item['post']}</div>)\r\n        ))} </div>\r\n        )    \r\n    } else {\r\n        return (\r\n            <div className='defaulChat'>\r\n                Please select a chat to start messaging\r\n            </div>\r\n        )\r\n    }\r\n    } \r\n\r\nexport default Chat","import Chat from './chat';\r\nexport default Chat;","import React, {Component} from 'react';\r\n\r\nimport './addNewPost.css'\r\n\r\n\r\nexport default class AddNewPost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newtext: ''\r\n        }\r\n        \r\n        this.AddNewPost = this.AddNewPost.bind(this);\r\n        this.UpdateText = this.UpdateText.bind(this);\r\n        this.eraseValuePost = this.eraseValuePost.bind(this);\r\n    }\r\n\r\n    UpdateText(event) {\r\n        this.setState(\r\n            {newtext: event.target.value}\r\n        )\r\n        document.addEventListener('click', this.eraseValuePost);\r\n    }\r\n\r\n    eraseValuePost() {\r\n        this.setState({ newtext: '' }, () => {\r\n            document.removeEventListener('click', this.eraseValuePost);\r\n    });\r\n  }\r\n\r\n    AddNewPost() {\r\n        this.props.onAddPost(this.state.newtext);\r\n        this.setState(\r\n            {newtext: ''}\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if(this.props.lastOpenedId !== '') {\r\n            return (\r\n                <form>\r\n                    <div>\r\n                        <textarea  className='newpost' \r\n                            placeholder=\"Write a message...\" \r\n                            form=\"text\" \r\n                            onChange={this.UpdateText} value={this.state.newtext}/>\r\n                    </div>\r\n                    <div>\r\n                        <button className='buttonpost' type=\"button\" onClick={this.AddNewPost}>SEND</button>\r\n                    </div>\r\n                </form>\r\n            )\r\n        } else return null   \r\n    }\r\n    \r\n}\r\n","import React, {Component} from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Chat from '../current_chat';\r\nimport AddNewPost from '../addNewPost/addNewPost.js';\r\n\r\nimport './chats.css'\r\n\r\nexport default class Chats extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createChatArea: '',\r\n        }\r\n        this.UpdateChatArea = this.UpdateChatArea.bind(this);\r\n        this.closeNewChatArea = this.closeNewChatArea.bind(this);\r\n    }\r\n\r\n    eraseCreateChatArea(){\r\n        this.setState(\r\n            {createChatArea: ''}\r\n            )\r\n    }\r\n\r\n    UpdateChatArea(event) {\r\n        this.setState(\r\n            {createChatArea: event.target.value}\r\n            )\r\n    }\r\n\r\n    NewChatArea() {\r\n        document.addEventListener('click', this.closeNewChatArea);\r\n        if (this.props.newChatArea === true) {\r\n                return(\r\n                    <>\r\n                        <input className=\"newChat\" \r\n                            placeholder=\"Введите имя чата...\"  \r\n                            form=\"text\"\r\n                            onChange={this.UpdateChatArea}\r\n                            value={this.state.createChatArea}\r\n                            autoFocus/>\r\n        \r\n                        <button className=\"addNewChat\" \r\n                            onClick={()=>this.props.onAddNewChat(this.state.createChatArea)}>\r\n                                Create chat\r\n                        </button>\r\n                    </>\r\n                )\r\n            }\r\n        }  \r\n\r\n    closeNewChatArea() {\r\n        this.setState({ createChatArea: '', }, () => {\r\n            document.removeEventListener('click', this.closeNewChatArea);\r\n    });\r\n    }\r\n\r\n    searchAllArea() {\r\n        if (this.props.newChatArea === false && this.props.autofocusinsearch === false) {\r\n            var onSearch = this.props.onSearchAll;\r\n            var name = 'searchAll' \r\n            var plchldr = \"Search in all chats...\" \r\n        } else if (this.props.newChatArea === false && this.props.autofocusinsearch === true) {\r\n            onSearch = this.props.onSearchChat;\r\n            name = 'searchAll autofocus' \r\n            plchldr = \"Search in this chat...\"\r\n            var exitSearchChatBtn = <button className=\"exitSearchBtn\" \r\n                                        onClick={()=>this.props.onChatAutoFocus()}> X\r\n                                    </button>\r\n        }\r\n        if (this.props.newChatArea === false) {\r\n            return (\r\n                <Row>\r\n                    <form className= 'searchForm'>\r\n                        <input className={name}\r\n                            type=\"text\" \r\n                            placeholder={plchldr}\r\n                            onChange={onSearch}\r\n                            value={(this.props.searchAllValue) ? this.props.searchAllValue : this.props.searchChatValue}/>\r\n                            \r\n                    </form>\r\n                    {(exitSearchChatBtn) ? exitSearchChatBtn : null}\r\n                </Row>\r\n            )\r\n        }\r\n        \r\n    }\r\n    \r\n    render() {\r\n        const lastOpenedId = this.props.lastOpenedId;\r\n        const chatLists = this.props.chats.map((item) => {\r\n        const {label, id} = item;\r\n        const name = (id === lastOpenedId) ? 'chats blue': 'chats'\r\n\r\n        return (\r\n                <li key={id}>\r\n                    <Row className = {name} \r\n                        onClick={() => this.props.OpenChat({id})}>\r\n                        {label}\r\n                    </Row>\r\n                </li>\r\n            )\r\n        })\r\n            \r\n        return (    \r\n            <Container >\r\n                <Row className='columns'>\r\n                    <Col xs={4} className='colLeft'>\r\n                        <Row>\r\n                            <Container>\r\n                                    {this.searchAllArea()}\r\n                                    {this.NewChatArea()}\r\n                                    <ul className=\"list-group\">\r\n                                        {chatLists}\r\n                                    </ul>\r\n                            </Container>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col className='currentChat' xs={8}>\r\n                        <Chat chats={this.props.chats} \r\n                                lastOpenedId={lastOpenedId} \r\n                                autofocusinsearch={this.props.autofocusinsearch}\r\n                                onSearchChat={this.props.onSearchChat}\r\n                                filteredobject={this.props.filteredobject}\r\n                                searchAllValue = {this.props.searchAllValue}\r\n                                searchChatValue = {this.props.searchChatValue}/>\r\n                        <AddNewPost onAddPost={this.props.onAddPost} lastOpenedId={lastOpenedId}/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            \r\n        )\r\n    }\r\n    \r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Header from '../src/components/header/header.js';\nimport Chats from '../src/components/chats/chats.js';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chats: \n        [\n          {label: 'Политика', \n          textarea: [{post : 'Как похорошела Москва при Собянине', id: 1}, \n                      {post : 'Жириновский уже не тот', id: 2}], \n          isOpen: false, \n          id: 1},\n          {label: 'Аналитика', \n          textarea: [{post : 'Очевидно что меньшивикам это не выгодно', id: 1}, \n                      {post : 'Если бы бабушка была дедушкой...', id: 2}], \n          isOpen: false, \n          id: 2},\n        ],\n      lastOpenedId: '',\n      maxPostId: 3,\n      maxChatId: 3,\n      newChatArea: false,\n      searchalltext: '',\n      autofocusinsearch: false,\n      filteredobject: '',\n      searchAllValue: '',\n      searchChatValue: ''\n    };\n    this.eraseCreateChatArea = React.createRef();\n    this.OpenChat = this.OpenChat.bind(this);\n    this.onAddPost = this.onAddPost.bind(this);\n    this.CreateNewChat = this.CreateNewChat.bind(this);\n    this.onAddNewChat = this.onAddNewChat.bind(this);\n    this.onSearchAll = this.onSearchAll.bind(this);\n    this.onSearchChat = this.onSearchChat.bind(this);\n    this.onChatAutoFocus = this.onChatAutoFocus.bind(this);\n    this.closeNewChatField = this.closeNewChatField.bind(this);\n    this.deleteSearchValue = this.deleteSearchValue.bind(this);\n  }\n\n  OpenChat(id) {\n    const index = this.state.chats.findIndex(elem => elem.id === id.id);\n    this.setState({lastOpenedId: id.id});\n    this.setState(({chats}) => {\n        \n      //  const newArr = [...before, newItem, ...after]; //вставляем newArr на место index*/\n        for (let i = 0; i < chats.length; i++) {\n          if (i===index) {\n              chats[i].isOpen = true;\n          } else if (chats[i].isOpen) {\n              chats[i].isOpen = false;\n          }        \n        }\n    });\n  }\n\n  onAddPost(newtext) {\n\n    const before = this.state.chats.slice(0, this.state.lastOpenedId-1); //все что до элемента\n    const oldElement = this.state.chats[this.state.lastOpenedId-1]; //элемент в кот добавляем post\n    const newText = {post: newtext, id: this.state.maxPostId + 1}; //формируем структуру нового поста\n    oldElement['textarea'].push(newText); //добавлем новый пост в элемент\n    const after = this.state.chats.slice(this.state.lastOpenedId); //все что после элемента\n    const newArr = [...before, oldElement, ...after]; //\n    newtext = '';\n\n    this.setState ({\n      chats: newArr,\n      maxPostId: this.state.maxPostId + 1\n    })\n  }\n\n  onAddNewChat(createChatArea) {\n    const newChat = {\n      label: createChatArea, \n      textarea: [{post : '', id: 1}, {post : '', id: 2}], \n      isOpen: false, \n      id: this.state.maxChatId,\n    }\n\n    const oldElement = this.state.chats;\n    const newArr = [...oldElement, newChat];\n    if (createChatArea !== '') {\n        this.setState({\n          chats: newArr,\n          maxChatId: this.state.maxChatId + 1,\n          newChatArea: false,\n          lastOpenedId: this.state.maxChatId\n        }\n      )\n    } else {\n      this.setState({\n        newChatArea: false\n      }\n    )\n    }\n    \n    this.eraseCreateChatArea.current.eraseCreateChatArea(); //вызывает eraseCreateChatArea из chats.js\n  }\n\n  //отрисовывает форму для создания чата\n  CreateNewChat() {\n    const value = this.state.newChatArea;\n    this.setState({newChatArea: !value})\n    document.addEventListener('click', this.closeNewChatField); //удаление формы при клике\n  }\n\n  //удаление формы при клике\n  closeNewChatField() {\n    this.setState({ newChatArea: false }, () => {\n        document.removeEventListener('click', this.closeNewChatField);\n  });\n  }\n\n  onChatAutoFocus() {\n    const value = this.state.autofocusinsearch;\n    this.setState({autofocusinsearch: !value})\n  }\n\n  onSearchAll (event) {\n\n    const filtered = this.state.chats.map(chat => chat.textarea.filter(\n      text => text.post.includes(event.target.value)))\n    this.setState({\n      filteredobject: filtered,\n      searchAllValue: event.target.value\n    })\n    document.addEventListener('click', this.deleteSearchValue);\n  }\n\n  onSearchChat (event) {\n    const filtered = this.state.chats[this.state.lastOpenedId-1].textarea.filter(\n      textarea => textarea.post.includes(event.target.value))\n    this.setState({\n      filteredobject: filtered,\n      searchChatValue: event.target.value\n    })\n    document.addEventListener('click', this.deleteSearchValue);\n  }\n\n  deleteSearchValue() {\n        this.setState({ filteredobject: '', searchAllValue: '', searchChatValue: '' }, () => {\n            document.removeEventListener('click', this.deleteSearchValue);\n    });\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n          <div><Header CreateNewChat={this.CreateNewChat}\n            lastOpenedId={this.state.lastOpenedId}\n            onChatAutoFocus={this.onChatAutoFocus}/>\n          </div>\n          <div>\n            <Chats chats={this.state.chats} \n                    OpenChat={this.OpenChat} \n                    lastOpenedId={this.state.lastOpenedId}\n                    onAddPost={this.onAddPost}\n                    newChatArea={this.state.newChatArea}\n                    onAddNewChat={this.onAddNewChat}\n                    ref = {this.eraseCreateChatArea}\n                    onSearchAll = {this.onSearchAll}\n                    onSearchChat = {this.onSearchChat}\n                    autofocusinsearch = {this.state.autofocusinsearch}\n                    filteredobject = {this.state.filteredobject}\n                    CreateNewChat = {this.CreateNewChat}\n                    searchAllValue = {this.state.searchAllValue}\n                    searchChatValue = {this.state.searchChatValue}\n                    onChatAutoFocus = {this.onChatAutoFocus}/>          \n          </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}